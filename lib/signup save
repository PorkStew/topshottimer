import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:crypto/crypto.dart';
import 'dart:convert';


class MyStatefulWidget extends StatefulWidget {
  @override
  _MyStatefulWidgetState createState() => _MyStatefulWidgetState();
}

class _MyStatefulWidgetState extends State<MyStatefulWidget> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(title: Text('update')),
        body: signuparea()
    );
  }
}

class signuparea extends StatefulWidget {
  @override
  _signupareaState createState() => _signupareaState();
}

class _signupareaState extends State<signuparea> {
  final _formKey = GlobalKey<FormState>();

  final firstName = TextEditingController();
  final lastName = TextEditingController();
  final email = TextEditingController();
  final password = TextEditingController();
  final conPassword = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Form(
      key: _formKey,
      child: Column( children: [

        TextField(
          onChanged: (text){
            if(text != "") {
              print('First text field: $text');
              print(validateName(text));
            } else
              {

              }
          },
          controller: this.firstName,
          decoration: InputDecoration(
              prefixIcon: Icon(Icons.person), labelText: "FirstName here"),
        ),
        TextField(
          onChanged: (text){
            print('First text field: $text');
            print(validateName(text));
          },
          controller: this.lastName,
          decoration: InputDecoration(
              prefixIcon: Icon(Icons.person), labelText: "LastName here"),
        ),
        TextField(
          onChanged: (text){
            print('First text field: $text');
            print(validateEamil(text));
          },
          controller: this.email,
          decoration: InputDecoration(
              prefixIcon: Icon(Icons.email), labelText: "Email here"),
        ),
        TextField(
          onChanged: (text){
            print('First text field: $text');
            print(validatePassword(text));
          },
          controller: this.password,
          decoration: InputDecoration(
              prefixIcon: Icon(Icons.lock), labelText: "Password here"),
        ),
        TextFormField(
          onChanged: (text){
            print('First text field: $text');
            if(conPassword.text != password.text){
              print("passwords don't match");
            }
            else{
              print("passwords match");
            }
          },
          controller: this.conPassword,
          decoration: InputDecoration(
              prefixIcon: Icon(Icons.lock), labelText: "Confirm password here"),
        ),
        ElevatedButton(
          onPressed: () {
            if(_formKey.currentState.validate()){
              if((firstName.text != "") & (lastName.text != "") & (email.text != "") & (password.text != "") & (conPassword.text != "")){

                    print("not empty");
              } else {
                print("we found an empty area");
              }
                  print("processing data for you please wait");
            }
          },
          child: Text('submit'),
        )
        // FlatButton(textColor: Colors.red, onPressed: () {
        //   sendData();
        // }, child: Text("SIGN UP"),),
      ],
    ),
    );
  }
  Future sendData() async {
    String hashedPassword = "";
    var bytes = utf8.encode(password.text);
    var digest = sha256.convert(bytes);
    hashedPassword = digest.toString();
    print("Digest as hex string: $digest");
    var de = utf8.decode(bytes);
    print(de);
    try{
      var url = 'https://nutant-ratings.000webhostapp.com/create.php';
      var res = await http.post(
          Uri.encodeFull(url), headers: {"Accept": "application/jason"},
          body: {
            "firstName": firstName.text,
            "lastName": lastName.text,
            "emailAddress": email.text,
            "password": hashedPassword,
            "country": "delete",
            "contactNumber": "delete",
          }
      );
    }catch (error) {
      print(error.toString());
    }
  }

  bool validateName(String value){
    String  pattern = r"^[a-zA-Z]+(([',. -][a-zA-Z ])?[a-zA-Z]*)*$";
    RegExp regExp = new RegExp(pattern);
    return regExp.hasMatch(value);
  }
  bool validateEamil(String value){
    String  pattern = r"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[A-Za-z]{2,64}";
    RegExp regExp = new RegExp(pattern);
    return regExp.hasMatch(value);
  }
  bool validatePassword(String value){
    String  pattern = r"^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[!@#\$&*~]).{8,}$";
    RegExp regExp = new RegExp(pattern);
    return regExp.hasMatch(value);
  }
}


